@model IEnumerable<digioz.Portal.Bo.Comment>

<div class="card mb-3" id="comments-root">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Comments (@Model.Count())</span>
        <button type="button" class="btn btn-info btn-sm" data-bs-toggle="collapse" data-bs-target="#@ViewBag.ReferenceType@ViewBag.ReferenceId" aria-expanded="false" aria-controls="@ViewBag.ReferenceType@ViewBag.ReferenceId">View</button>
    </div>

    <div id="@ViewBag.ReferenceType@ViewBag.ReferenceId" class="collapse hide">
        @if (!Model.Any())
        {
            <div class="card-body">
                <p class="text-muted small mb-0">No comments yet.</p>
                @if (!User.Identity.IsAuthenticated)
                {
                    <div class="mt-2">
                        <small class="text-muted fst-italic">Please log in to post comments.</small>
                    </div>
                }
            </div>
        }
        else
        {
            <ul class="list-group list-group-flush">
                @foreach (var comment in Model)
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="d-flex align-items-start">
                                <div class="me-2">
                                    @if (comment.UserId != null)
                                    {
                                        <a href="/Profile/ShowDetails?userId=@comment.UserId">
                                            <img src="/Profile/ShowAvatar?userId=@comment.UserId" class="rounded-circle" width="40" height="40" alt="@comment.Username" />
                                        </a>
                                    }
                                    else
                                    {
                                        <img src="/Profile/ShowAvatar" class="rounded-circle" width="40" height="40" alt="avatar" />
                                    }
                                </div>
                                <div>
                                    <p class="mb-1">@comment.Body</p>
                                    <small class="text-muted">
                                        <a href="/Profile/ShowDetails?userId=@comment.UserId">@comment.Username</a> on @comment.ModifiedDate
                                    </small>
                                </div>
                            </div>
                            <div class="text-end">
                                <span class="small me-1">Likes (<b>@comment.Likes</b>)</span>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <form action="/Comments/Like?id=@comment.Id" method="post" class="d-inline comment-like-form" data-comment-id="@comment.Id">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-outline-secondary p-0 like-btn" style="width:22px;height:22px;display:inline-flex;align-items:center;justify-content:center;line-height:1;" aria-label="Like">
                                            <img src="~/img/images/icons/20x20/Like.png" alt="Like" width="14" height="14" />
                                        </button>
                                    </form>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }

        @if (User.Identity.IsAuthenticated)
        {
            <div class="card-body border-top">
                <form action="/Comments/Add" method="post" class="mt-3" id="commentForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="referenceId" name="referenceId" value="@ViewBag.ReferenceId" />
                    <input type="hidden" id="referenceType" name="referenceType" value="@ViewBag.ReferenceType" />
                    <input type="hidden" id="recaptchaToken" name="recaptchaToken" />
                    <div class="mb-3">
                        <textarea id="comment" name="comment" class="form-control" rows="3" placeholder="Your comments"></textarea>
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-info btn-sm">Post Comment</button>
                    </div>
                </form>
            </div>
        }
        else if (Model.Any())
        {
            <div class="card-body">
                <small class="text-muted fst-italic">Please log in to post comments.</small>
            </div>
        }
    </div>
</div>

@if (ViewBag.RecaptchaEnabled == true && !string.IsNullOrEmpty((string)ViewBag.RecaptchaPublicKey))
{
    <script src="https://www.google.com/recaptcha/api.js?render=@ViewBag.RecaptchaPublicKey"></script>
}
<script>
(function(){
    // After successful add / like we will do a full page reload for guaranteed refresh.
    // This avoids the need for a separate handler or partial fetch complexities.

    function handleAjaxForm(form, beforeSend){
        form.addEventListener('submit', function(e){
            if (beforeSend) {
                const proceed = beforeSend(e);
                if (proceed === false) return; // recaptcha will manually continue
            } else {
                e.preventDefault();
            }
            const data = new FormData(form);
            fetch(form.action, { method: 'POST', body: data, headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(r=>{ window.location.reload(); })
                .catch(()=>{ window.location.reload(); });
        });
    }

    const commentForm = document.getElementById('commentForm');
    if(commentForm){
        if(window.grecaptcha && '@ViewBag.RecaptchaEnabled' === 'True'){
            handleAjaxForm(commentForm, function(e){
                e.preventDefault();
                grecaptcha.ready(function(){
                    grecaptcha.execute('@ViewBag.RecaptchaPublicKey', {action: 'comment'}).then(function(token){
                        document.getElementById('recaptchaToken').value = token;
                        // submit again without preventing
                        const data = new FormData(commentForm);
                        fetch(commentForm.action, { method: 'POST', body: data, headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                            .then(r=>{ window.location.reload(); })
                            .catch(()=>{ window.location.reload(); });
                    });
                });
                return false;
            });
        } else {
            handleAjaxForm(commentForm);
        }
    }

    document.querySelectorAll('.comment-like-form').forEach(f=>{
        f.addEventListener('submit', function(e){
            e.preventDefault();
            const data = new FormData(f);
            fetch(f.action, { method: 'POST', body: data, headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(()=> window.location.reload())
                .catch(()=> window.location.reload());
        });
    });
})();
</script>


